version: '3.9'

x-logging:
  &default-logging
  driver: "json-file"
  options:
    max-size: "1m"
    max-file: "1"
    tag: "{{.Name}}"

x-labels:
  &default-labels
  logging: "alloy"

services:


  grafana:
    image: grafana/grafana:11.5.2
    container_name: grafana
    ports:
      - 3000:3000
    restart: unless-stopped
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_USERS_DEFAULT_THEME=dark
      - GF_LOG_LEVEL=warn
    volumes:
      - ./configs/grafana/provisioning/datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
      - ./configs/grafana/provisioning/dashboard.yaml:/etc/grafana/provisioning/dashboards/main.yaml
      - ./configs/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - traces
    logging: *default-logging


  alloy:
    image: grafana/alloy:v1.7.4
    container_name: alloy
    ports:
      - "12347:12345" # allow ui server
      - "12348:12348"
      - "6832:6832"
      - "55679:55679"
      # - "4317:4317" # otlp grpc
      # - "4318:4318" # otlp http
    volumes:
      - ./configs/alloy/config.alloy:/etc/alloy/config.alloy
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: ["run", "--server.http.listen-addr=0.0.0.0:12345", "--storage.path=/var/lib/alloy/data", "/etc/alloy/config.alloy"]
    networks:
      - traces


  tempo:
    image: grafana/tempo:2.7.1
    container_name: tempo
    ports:
      - 3200:3200   # tempo http
      - 9095:9095   # tempo grpc
      - 14268:14268 # jaeger ingest
      - 4318:4318   # otlp http
      - 4317:4317   # otlp grpc
    volumes:
      - ./configs/tempo/tempo-local.yaml:/etc/tempo-local.yaml
    command: ["-config.file=/etc/tempo-local.yaml"]
    networks:
      - traces
    logging: *default-logging


  loki:
    image: grafana/loki:3.4
    container_name: loki
    ports:
      - 3100:3100
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - traces
    logging: *default-logging

  mimir:
    container_name: mimir
    image: grafana/mimir:2.15.1
    command: ["-ingester.native-histograms-ingestion-enabled=true", "-config.file=/etc/mimir.yaml"]
    ports:
      - 9009:9009
    volumes:
      - "./configs/mimir/mimir.yaml:/etc/mimir.yaml"
    logging: *default-logging
    networks:
      - traces

  pushgateway:
    container_name: pushgateway
    image: prom/pushgateway:v1.11.0
    ports:
      - 9091:9091
    networks:
      - traces
    labels: *default-labels

  postgres:
    container_name: postgres
    image: postgres:17
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: prefect
    ports:
      - 5432:5432
    networks:
      - traces
    volumes:
      - postgres-data:/var/lib/postgresql/data

  prefect:
    container_name: prefect
    build:
      context: .
      args:
        PACKAGE: flows
      dockerfile: Dockerfile
    command: prefect server start --host 0.0.0.0
    depends_on:
      - postgres
    ports:
      - 4200:4200
    environment:
      PREFECT_DEFAULT_WORK_POOL_NAME: "worker"
      PREFECT_API_DATABASE_CONNECTION_URL: "postgresql+asyncpg://postgres:postgres@postgres:5432/prefect"
      PREFECT_API_URL: "http://localhost:4200/api"
      PREFECT_SERVER_API_HOST: "127.0.0.1"
    logging: *default-logging
    networks:
      - traces

  prefect_flow:
    build:
      context: .
      args:
        PACKAGE: flows
      dockerfile: Dockerfile
    container_name: prefect_flow
    environment:
      PREFECT_API_URL: "http://prefect:4200/api"
      OTEL_EXPORTER_OTLP_ENDPOINT: "http://tempo:4317"
      PUSH_GATEWAY: "http://pushgateway:9091"

    depends_on:
      - prefect
    networks:
      - traces
    deploy:
      restart_policy:
        condition: on-failure
    logging: *default-logging
    labels: *default-labels

  receiver:
    build:
      context: .
      args:
        PACKAGE: receiver
      dockerfile: Dockerfile
    container_name: receiver
    ports:
      - 8001:8001
    environment:
      PORT: 8001
      OTEL_EXPORTER_OTLP_ENDPOINT: "http://tempo:4317"

    networks:
      - traces
    logging: *default-logging
    labels: *default-labels

  poller:
    build:
      context: .
      args:
        PACKAGE: poller
      dockerfile: Dockerfile
    container_name: poller
    ports:
      - 8002:8002
    environment:
      PORT: 8002
      RECEIVER_ENDPOINT: http://receiver:8001
      OTEL_EXPORTER_OTLP_ENDPOINT: "http://tempo:4317"
    networks:
      - traces
    logging: *default-logging
    labels: *default-labels

volumes:
  postgres-data:

networks:
  traces:
    driver: bridge